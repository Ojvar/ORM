<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FieldAttribute" xml:space="preserve">
    <value>[BaseBLL.Base.Field({0})]</value>
  </data>
  <data name="FieldForeignKey" xml:space="preserve">
    <value>//
	// Genereted Property of {3}
	//
	#region Referenced Property - {2}
		BLL.Entity{8}.{0}{7} _{2}_{3};
		public BLL.Entity{8}.{0}{7} {2}_{3}
		{{
			get
			{{
				if ((null == _{2}_{3}) &amp;&amp; (AutoLoadForeignKeys))
					load_{2}_{3} ();
				return _{2}_{3};
			}}
			set
			{{
				_{2}_{3}	= value;
			}}
		}}

		public void load_{2}_{3} ()
		{{ 
			BLL.Entity{8}.{0}	entity;
			BLL.Logic{8}.{1}	logic;

			entity	= new BLL.Entity{8}.{0} () {{ {5} = {3} }};
			logic	= new BLL.Logic{8}.{1} ("{6}");
			logic.read (entity, "{5}");

			_{2}_{3}	= entity;
		}}
	#endregion</value>
  </data>
  <data name="FieldForeignKeyNullable" xml:space="preserve">
    <value>//
	// Genereted Property of {3}
	//
	#region Referenced Property - {2}
		BLL.Entity{8}.{0}{7} _{2}_{3};
		public BLL.Entity{8}.{0}{7} {2}_{3}
		{{
			get
			{{
				if ((null == _{2}_{3}) &amp;&amp; ({3}.HasValue) &amp;&amp; (AutoLoadForeignKeys))
					load_{2}_{3} ();
				return _{2}_{3};
			}}
			set
			{{
				_{2}_{3}	= value;
			}}
		}}

		public void load_{2}_{3} ()
		{{ 
			BLL.Entity{8}.{0}	entity;
			BLL.Logic{8}.{1}	logic;

			entity	= new BLL.Entity{8}.{0} () {{ {5} = {3}.Value }};
			logic	= new BLL.Logic{8}.{1} ("{6}");
			logic.read (entity, "{5}");

			_{2}_{3}	= entity;
		}}
	#endregion</value>
  </data>
  <data name="FieldProperty" xml:space="preserve">
    <value>
		{0}
		public {1} {2}
		{{
			get;
			set;
		}}</value>
  </data>
  <data name="GetInformation" xml:space="preserve">
    <value>
WITH FK AS
	(
	SELECT  
			RC.CONSTRAINT_CATALOG
			,RC.CONSTRAINT_SCHEMA 
			,KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME 
			,KCU1.TABLE_NAME AS FK_TABLE_NAME 
			,KCU1.COLUMN_NAME AS FK_COLUMN_NAME 
			,KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION 
			,KCU2.CONSTRAINT_NAME AS REFERENCED_CONSTRAINT_NAME 
			,KCU2.TABLE_NAME AS REFERENCED_TABLE_NAME 
			,KCU2.COLUMN_NAME AS REFERENCED_COLUMN_NAME 
			,KCU2.ORDINAL_POSITION AS REFERENCED_ORDINAL_POSITION 
			,RC.UPDATE_RULE
			,RC.DELETE_RULE
	FROM
			[{0}].INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC 
		INNER JOIN	[{0}].INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU1 ON
				KCU1.CONSTRAINT_CATALOG = RC.CONSTRAINT_CATALOG  
			AND KCU1.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA 
			AND KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME 
		INNER JOIN [{0}].INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU2 ON
				KCU2.CONSTRAINT_CATALOG = RC.UNIQUE_CONSTRAINT_CATALOG  
			AND KCU2.CONSTRAINT_SCHEMA = RC.UNIQUE_CONSTRAINT_SCHEMA 
			AND KCU2.CONSTRAINT_NAME = RC.UNIQUE_CONSTRAINT_NAME 
			AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION 
)

SELECT
		K.*,
		FK.*
FROM
		[{0}].INFORMATION_SCHEMA.COLUMNS AS K
	LEFT OUTER JOIN FK ON
			(FK.FK_TABLE_NAME = K.TABLE_NAME)
		AND (FK.CONSTRAINT_CATALOG = K.TABLE_CATALOG)
		AND (FK.CONSTRAINT_SCHEMA = K.TABLE_SCHEMA)
		AND (FK.FK_COLUMN_NAME = K.COLUMN_NAME)
WHERE
		(K.TABLE_NAME = '{1}')
	AND (K.COLUMN_NAME = '{2}')</value>
  </data>
  <data name="GetReferentialInformation" xml:space="preserve">
    <value>
WITH base AS
(
	SELECT
			OBJECT_NAME (FK.referenced_object_id) AS primaryTable,
			COL_NAME (FK.referenced_object_id, FKC.referenced_column_id) AS primaryColumn,
			OBJECT_NAME (FK.parent_object_id) AS foreignTable,
			COL_NAME (FK.parent_object_id, FKC.parent_column_id) AS foreignColumn
	FROM
			[{0}].sys.foreign_keys AS FK
		INNER JOIN [{0}].sys.foreign_key_columns AS FKC ON (FKC.constraint_object_id = FK.object_id)
)

SELECT
		*
FROM
		base
WHERE
		([primaryTable] = '{1}') AND
		([primaryColumn] = '{2}')
</value>
  </data>
  <data name="FieldReferentialKey" xml:space="preserve">
    <value>//
	// Genereted Property of {0}
	//
	#region Relation - {0} (Has-Many relation)
		private System.Data.DataTable _get_{0}_{1};
		public System.Data.DataTable get{0}_{1}
		{{
			get
			{{
				if ((_get_{0}_{1} == null) &amp;&amp; (AutoLoadForeignKeys))
					load{0}_{1} ();

				return _get_{0}_{1};
			}}
			set
			{{
				_get_{0}_{1}	= value;
			}}
		}}

		public void load{0}_{1} (int pageIndex = -1, int pageSize = 100)
		{{
			CommandResult	opResult;

			BLL.Logic{4}.{0}	logic	= new BLL.Logic{4}.{0} ("{3}");
			if (pageIndex == -1)
				opResult	= logic.allData ("{1} = @{1}", "", false, true, new KeyValuePair ("@{1}", {2}));
			else
				opResult	= logic.allByPaging ( pageIndex, pageSize, "{1} = @{1}", "", false, true, new KeyValuePair ("@{1}", {2}));

			if (opResult.status == BaseDAL.Base.EnumCommandStatus.success)
				_get_{0}_{1}	= opResult.model as System.Data.DataTable;
		}}
	#endregion</value>
  </data>
</root>